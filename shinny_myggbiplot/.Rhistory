}
df_all_centers <- data.frame()
df_lines <- data.frame()
for (i in 1:number_of_people){
df_individual_centers = data.frame()
for (j in 1:nrow(df_centers)){
tem = generate_center(df_centers[j,],j)
df_individual_centers = rbind(df_individual_centers,unlist(tem))
}
names(df_individual_centers) <- c('x','y','c_id')
df_individual_centers$person_id = rep(i,nrow(df_individual_centers))
df_all_centers <- rbind(df_all_centers,df_individual_centers)
names(df_all_centers) <-  c('x','y','c_id','person_id')
#construct df for drawing lines
permutations <- combn(nrow(df_centers),2)
for(k in 1:ncol(permutations)){
perv_vec = permutations[,k]
df_ends = df_individual_centers[perv_vec,]
df_lines = rbind(df_lines, df_ends)
#gg <- gg+geom_segment(data = df_ends,aes(x=df_ends$x[1],y=df_ends$y[1],xend=df_ends$x[2],yend=df_ends$y[2]))
}
}
# fac <- as.factor(paste(df_lines$c_id,df_lines$person_id))
fac <- as.factor(rep(1:(nrow(df_lines)/2),each=2))
ggg <- ggplot(data=df_lines,aes(x=df_lines$x,y=df_lines$y))+geom_line(aes(color=as.factor(df_lines$person_id),group=fac))+geom_point(aes(color=as.factor(df_lines$person_id)))
ggg <- ggg+theme_bw()
ggg    # this plot shows people's minutiae points
center1 <- c(1,0.2)
center2 <- c(0.3,2)
center3 <- c(0.8,5)
center4 <- c(1.6,1)
center5 <- c(2.5,3)
center6 <- c(3.2,4.8)
center7 <- c(3,2.1)
df_centers <- as.data.frame(rbind(center1, center2,
center3,center4,center5,center6,center7))
library(ggplot2)
library(class)
library(ROCR)
center1 <- c(1,0.2)
center2 <- c(0.3,2)
center3 <- c(0.8,5)
center4 <- c(1.6,1)
center5 <- c(2.5,3)
center6 <- c(3.2,4.8)
center7 <- c(3,2.1)
df_centers <- as.data.frame(rbind(center1, center2,
center3,center4,center5,center6,center7))
fingerprint1 <- list(center1, center2, center3)
# parameters
recog_sd = 0.01
iterations = 1
people_sd = 0.2
number_of_people = 20
n_tests = 500
# parameters for finger distribution
# all units are in mm
fp_shape = 0.193*2
fp_scale = 0.591
fp_rate= 1/fp_scale
# functions
generate_point<- function(p,sd=recog_sd){
#   new_distance = rgamma(1,shape = fp_shape,rate = fp_shape)
#   angle = runif(1,0,2*pi)
#   new_x = p[1]+cos(angle)*new_distance
#   new_y = p[1]+sin(angle)*new_distance
angle = runif(1,0,2*pi)
new_dist = rnorm(1,mean = 0,sd = sd)
new_x = p[1] + sin(angle)*new_dist
new_y =  p[2] + cos(angle)*new_dist
return(c(new_x,new_y))
}
generate_group <- function(c,n=iterations,group_id,sd=recog_sd){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c,sd)
# g <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
# scripts
g <- ggplot()   # create ggplot for plottting
# this function generate all possible finger print scan of same person
generate_identicals <- function(df_centers){
df_groups = data.frame()
for (i in 1:nrow(df_centers)){
temp_c = df_centers[i,]
group = generate_group(temp_c,group_id = i)
df_groups = rbind(df_groups,group)
}
names(df_groups) <- c('x','y','id')
df_groups$id = as.factor(df_groups$id)
g = g + geom_point(data = df_groups, aes(x=df_groups$x, y=df_groups$y, color=df_groups$id))
return(df_groups)
}
### generate different people's minutea points
generate_center <- function(center,c_id){
new_distance = rgamma(1,shape = fp_shape,rate = fp_rate)
angle = runif(1,0,2*pi)
new_x = center[1] + cos(angle)*new_distance
new_y = center[2] + sin(angle)*new_distance
return(c(new_x,new_y,c_id))
}
df_all_centers <- data.frame()
df_lines <- data.frame()
for (i in 1:number_of_people){
df_individual_centers = data.frame()
for (j in 1:nrow(df_centers)){
tem = generate_center(df_centers[j,],j)
df_individual_centers = rbind(df_individual_centers,unlist(tem))
}
names(df_individual_centers) <- c('x','y','c_id')
df_individual_centers$person_id = rep(i,nrow(df_individual_centers))
df_all_centers <- rbind(df_all_centers,df_individual_centers)
names(df_all_centers) <-  c('x','y','c_id','person_id')
#construct df for drawing lines
permutations <- combn(nrow(df_centers),2)
for(k in 1:ncol(permutations)){
perv_vec = permutations[,k]
df_ends = df_individual_centers[perv_vec,]
df_lines = rbind(df_lines, df_ends)
#gg <- gg+geom_segment(data = df_ends,aes(x=df_ends$x[1],y=df_ends$y[1],xend=df_ends$x[2],yend=df_ends$y[2]))
}
}
# fac <- as.factor(paste(df_lines$c_id,df_lines$person_id))
fac <- as.factor(rep(1:(nrow(df_lines)/2),each=2))
ggg <- ggplot(data=df_lines,aes(x=df_lines$x,y=df_lines$y))+geom_line(aes(color=as.factor(df_lines$person_id),group=fac))+geom_point(aes(color=as.factor(df_lines$person_id)))
ggg <- ggg+theme_bw()
ggg    # this plot shows people's minutiae points
# function to generate random scanning for test
generate_fp <- function(df_all_centers){
p_id = sample(1:number_of_people,1)
df_center_to_test <- df_all_centers[df_all_centers$person_id==p_id,]
df_fp = generate_identicals(df_center_to_test)
df_fp['person_id'] = rep(p_id, nrow(df_center_to_test))
return(df_fp)
}
# testing
predictions<-c()
for(j in 1:n_tests){
df_test =  generate_fp(df_all_centers)
test <-df_test[,c('x','y'),]
true_response <- paste(df_test$id,df_test$person_id,sep = ',')
train <- df_all_centers[,c('x','y')]
train_response =paste(df_all_centers$c_id,df_all_centers$person_id,sep = ',')
pred <- knn(train,test = test,cl = train_response,k=1)
ids <- c()
for(i in 1:length(pred)){
pred_split <- strsplit(toString(pred[i]),',')
possible_id <- as.numeric(unlist(pred_split)[2])
ids<-c(ids,possible_id)
}
pred_prob <- sum(ids==unique(df_test$person_id))/(length(ids))
predictions <- c(predictions,pred_prob)
}
labels = c(rep(1,n_tests),rep(0,n_tests))
predictions <- c(predictions,(1-predictions))
pred <- prediction(predictions,labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
abline(a=0,b=1)
perf <- performance(pred,measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;)
plot(perf)
abline(a=0,b=1)
perf@y.values
help("performance")
perf <- performance(pred,measure = 'sens',"spec")
plot(perf)
abline(a=0,b=1)
help("performance")
perf <- performance(pred,measure =  "tpr",x.measure = "fpr")
plot(perf)
abline(a=0,b=1)
library(ggplot2)
library(class)
library(ROCR)
center1 <- c(1,0.2)
center2 <- c(0.3,2)
center3 <- c(0.8,5)
center4 <- c(1.6,1)
center5 <- c(2.5,3)
center6 <- c(3.2,4.8)
center7 <- c(3,2.1)
df_centers <- as.data.frame(rbind(center1, center2,
center3,center4,center5,center6,center7))
fingerprint1 <- list(center1, center2, center3)
# parameters
recog_sd = 0.01
iterations = 1
people_sd = 0.2
number_of_people = 30
n_tests = 200
# parameters for finger distribution
# all units are in mm
fp_shape = 0.193*2
fp_scale = 0.591
fp_rate= 1/fp_scale
# functions
generate_point<- function(p,sd=recog_sd){
#   new_distance = rgamma(1,shape = fp_shape,rate = fp_shape)
#   angle = runif(1,0,2*pi)
#   new_x = p[1]+cos(angle)*new_distance
#   new_y = p[1]+sin(angle)*new_distance
angle = runif(1,0,2*pi)
new_dist = rnorm(1,mean = 0,sd = sd)
new_x = p[1] + sin(angle)*new_dist
new_y =  p[2] + cos(angle)*new_dist
return(c(new_x,new_y))
}
generate_group <- function(c,n=iterations,group_id,sd=recog_sd){
i=1
df_p = data.frame()
while (i <=n){
new_point <- generate_point(c,sd)
# g <- g+geom_point(data = as.data.frame(new_point), aes(x = new_point[1], y= new_point[2]))
df_p <- rbind(df_p,new_point)
i=i+1
}
df_p['id'] <- group_id
names(df_p) <- c('x','y')
return(df_p)
}
# scripts
g <- ggplot()   # create ggplot for plottting
# this function generate all possible finger print scan of same person
generate_identicals <- function(df_centers){
df_groups = data.frame()
for (i in 1:nrow(df_centers)){
temp_c = df_centers[i,]
group = generate_group(temp_c,group_id = i)
df_groups = rbind(df_groups,group)
}
names(df_groups) <- c('x','y','id')
df_groups$id = as.factor(df_groups$id)
g = g + geom_point(data = df_groups, aes(x=df_groups$x, y=df_groups$y, color=df_groups$id))
return(df_groups)
}
### generate different people's minutea points
generate_center <- function(center,c_id){
new_distance = rgamma(1,shape = fp_shape,rate = fp_rate)
angle = runif(1,0,2*pi)
new_x = center[1] + cos(angle)*new_distance
new_y = center[2] + sin(angle)*new_distance
return(c(new_x,new_y,c_id))
}
df_all_centers <- data.frame()
df_lines <- data.frame()
for (i in 1:number_of_people){
df_individual_centers = data.frame()
for (j in 1:nrow(df_centers)){
tem = generate_center(df_centers[j,],j)
df_individual_centers = rbind(df_individual_centers,unlist(tem))
}
names(df_individual_centers) <- c('x','y','c_id')
df_individual_centers$person_id = rep(i,nrow(df_individual_centers))
df_all_centers <- rbind(df_all_centers,df_individual_centers)
names(df_all_centers) <-  c('x','y','c_id','person_id')
#construct df for drawing lines
permutations <- combn(nrow(df_centers),2)
for(k in 1:ncol(permutations)){
perv_vec = permutations[,k]
df_ends = df_individual_centers[perv_vec,]
df_lines = rbind(df_lines, df_ends)
#gg <- gg+geom_segment(data = df_ends,aes(x=df_ends$x[1],y=df_ends$y[1],xend=df_ends$x[2],yend=df_ends$y[2]))
}
}
# fac <- as.factor(paste(df_lines$c_id,df_lines$person_id))
fac <- as.factor(rep(1:(nrow(df_lines)/2),each=2))
ggg <- ggplot(data=df_lines,aes(x=df_lines$x,y=df_lines$y))+geom_line(aes(color=as.factor(df_lines$person_id),group=fac))+geom_point(aes(color=as.factor(df_lines$person_id)))
ggg <- ggg+theme_bw()
ggg    # this plot shows people's minutiae points
# function to generate random scanning for test
generate_fp <- function(df_all_centers){
p_id = sample(1:number_of_people,1)
df_center_to_test <- df_all_centers[df_all_centers$person_id==p_id,]
df_fp = generate_identicals(df_center_to_test)
df_fp['person_id'] = rep(p_id, nrow(df_center_to_test))
return(df_fp)
}
# testing
predictions<-c()
for(j in 1:n_tests){
df_test =  generate_fp(df_all_centers)
test <-df_test[,c('x','y'),]
true_response <- paste(df_test$id,df_test$person_id,sep = ',')
train <- df_all_centers[,c('x','y')]
train_response =paste(df_all_centers$c_id,df_all_centers$person_id,sep = ',')
pred <- knn(train,test = test,cl = train_response,k=1)
ids <- c()
for(i in 1:length(pred)){
pred_split <- strsplit(toString(pred[i]),',')
possible_id <- as.numeric(unlist(pred_split)[2])
ids<-c(ids,possible_id)
}
pred_prob <- sum(ids==unique(df_test$person_id))/(length(ids))
predictions <- c(predictions,pred_prob)
}
labels = c(rep(1,n_tests),rep(0,n_tests))
predictions <- c(predictions,(1-predictions))
pred <- prediction(predictions,labels)
perf <- performance(pred,measure =  "tpr",x.measure = "fpr")
plot(perf)
abline(a=0,b=1)
library(ggplot2)
voted_favor = 3208
voted_oppose = 3143
test_favor = 730
test_oppose = 942
test_total = test_favor+test_oppose
test_favor_ratio = test_favor/test_total
n=10000
data = c(rep(1,voted_favor),rep(0,voted_oppose))
ratio_distrib = c()
for (i in 1:n){
perm = sample(data,test_total)
perm_favor = sum(perm)
perm_favor_ratio = perm_favor/test_total
ratio_distrib <- c(ratio_distrib,perm_favor_ratio)
}
count(ratio_distrib<test_favor_ratio)
sum(ratio_distrib<test_favor_ratio)
library(ggplot2)
voted_favor = 3208
voted_oppose = 3143
test_favor = 730
test_oppose = 942
test_total = test_favor+test_oppose
test_favor_ratio = test_favor/test_total
n=10000   # set number of permutations
data = c(rep(1,voted_favor),rep(0,voted_oppose))
ratio_distrib = c()
for (i in 1:n){
perm = sample(data,test_total)    # sample from counted votes
perm_favor = sum(perm)
perm_favor_ratio = perm_favor/test_total   # calculate simulated favor rate
ratio_distrib <- c(ratio_distrib,perm_favor_ratio)
}
ratio_min = min(ratio_distrib)
ratio_max = max(ratio_distrib)
step = (ratio_max-ratio_min)/10
range_distrib = cut(ratio_distrib,breaks=seq(ratio_min-step,ratio_max+step,step))
df <- as.data.frame(table(range_distrib))
names(df) <- c("range","count")
# construct distribution plot
g <- ggplot(data=df,aes(x=range,y=count))+geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle=45))
g <- g+ggtitle("Distribution of Permutated Favoring Rate")+
xlab("Favoring Rate Range") + ylab("Count of Each Favoring Rate Range")
g
# Set Seed
# Controls the random number generator.
set.seed(123)
# Construct Matrix
# The sample is taken and stored in a vector containing 6000 elements.
# These elements are then redistributed into a matrix.
aMat <- matrix(sample(10, size=6*1000, replace=TRUE), nrow=6, ncol=1000)
sum(aMat==6)
apply(aMat, 2, mean)
small_five <- function(x){
return(sum(x<5))
}
apply(aMat, 2,small_five)
small_five <- function(x){
return(sum(x<5)>2)
}
apply(aMat, 2,small_five)
sum(apply(aMat, 2,small_five))
install.packages("nycflights13")
# EX3
library(nycflights13)
df<-data(flights, package="nycflights13")
head(df)
# EX3
library(nycflights13)
data(flights, package="nycflights13")
help("flights", package="nycflights13")
data("flights")
flights
head(flights)
str(flights)
sum(flights$year==2013 & flights$month==6)
df_june <- flights[flights$year==2013 & flights$month==6,]
head(df_june)
df_june <- flights[flights$year==2013 & flights$month==6 & flights$day==20,]
head(df_june)
df_june[df_june$dep_time==max(df_june$dep_time),]
df_june$dep_time==max(df_june$dep_time)
head(df_june$dep_time)
max(df_june$dep_time)
help("max")
max(df_june$dep_time,na.rm = TRUE)
df_june[df_june$dep_time==max(df_june$dep_time,na.rm = TRUE),]
max(df_june$dep_time,na.rm = TRUE)
df_june$dep_time==max(df_june$dep_time,na.rm = TRUE)
sum(df_june$dep_time==max(df_june$dep_time,na.rm = TRUE))
match(df_june$dep_time,2356)
df_june[990,]
df_june[990,]$tailnum
match(df_june$dep_time,2356)
match(df_june$dep_time,2356)==1
sum(match(df_june$dep_time,2356)==1)
match(2356,df_june$dep_time)
df_june[990,]$tailnum
df_june <- flights[flights$year==2013 & flights$month==7 & flights$day==20,]
df_june[df_june$dep_time==max(df_june$dep_time,na.rm = TRUE),]
match(2356,df_june$dep_time)
max(df_june$dep_time,na.rm = TRUE)
match(2324,df_june$dep_time)
df_june[791,]$tailnum
df_june <- flights[flights$year==2013 & flights$month==7 & flights$day==31,]
max(df_june$dep_time,na.rm = TRUE)
match(2352,df_june$dep_time)
df_june[997,]$tailnum
df <-read.csv("SacramentocrimeJanuary2006.csv")
# EX1
total_row <- nrow(df)
code_row <- sum(df$ucr_ncic_code>=1301 & df$ucr_ncic_code<=1315)
p1_fraction <- code_row/total_row
# EX2
library(xml2)
library(rvest)
url <- "https://wi-recordcheck.org/help/ncicoffensecodes.htm"
df_ex2 <- read_html(url) %>% html_node(".MsoNormalTable") %>% html_table()
names(df_ex2) <- c("ucr_ncic_code","offence/charge")
# perform left join
df2_merege <- merge(df,df_ex2,by = "ucr_ncic_code",all.y = TRUE)
sum(!complete.cases(df2_merege))
setwd("~/Desktop/OneDrive/MA 386/Task DATA IO")
df <-read.csv("SacramentocrimeJanuary2006.csv")
# EX1
total_row <- nrow(df)
code_row <- sum(df$ucr_ncic_code>=1301 & df$ucr_ncic_code<=1315)
p1_fraction <- code_row/total_row
# EX2
library(xml2)
library(rvest)
url <- "https://wi-recordcheck.org/help/ncicoffensecodes.htm"
df_ex2 <- read_html(url) %>% html_node(".MsoNormalTable") %>% html_table()
names(df_ex2) <- c("ucr_ncic_code","offence/charge")
# perform left join
df2_merege <- merge(df,df_ex2,by = "ucr_ncic_code",all.y = TRUE)
sum(!complete.cases(df2_merege))
sum(!df_ex2$ucr_ncic_code %in% df$ucr_ncic_code)
sum(!df$ucr_ncic_code %in% df_ex2$ucr_ncic_code)
df2_merege <- merge(df,df_ex2,by = "ucr_ncic_code",all.x = TRUE)
sum(!complete.cases(df2_merege))
dim(df)
dim(df_ex2)
head(df2_merege)
head(df_ex2)
head(df)
df_ex2 <- df_ex2[2:]
df_ex2 <- df_ex2[2:nrow(df_ex2),]
names(df_ex2) <- c("ucr_ncic_code","offence/charge")
head(df_ex2)
str(df_ex2)
str(df)
df_ex2$ucr_ncic_code <- as.numeric(df_ex2$ucr_ncic_code)
# perform left join
df2_merege <- merge(df,df_ex2,by = "ucr_ncic_code",all.x = TRUE)
sum(!complete.cases(df2_merege))
library(httr)
library(knitr)
setwd("~/Desktop/OneDrive/myGit/Statistics-Projects/Permutation Test")
knit("Portofolio_Permutation.Rmd","README.md")
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
df = data(wine)
names(df)
data(wine)
help(wine)
help("wine")
as.data.frame(data(wine))
typeof(df)
data(wine)
typeof(data(wine))
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
help(wine)
wine
names(wine)
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
shiny::runApp('~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot')
library(rsconnect)
setwd("~/Desktop/OneDrive/myGit/Biplot_Analysis4Smari/shinny_myggbiplot")
deployApp()
